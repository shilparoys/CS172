<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html dir="ltr">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes"> 
  <meta http-equiv="Pragma" content="no-cache"> 
  <meta http-equiv="Expires" content="-1"> 
  <meta name="PageID" content="termsofuse.2.0"> 
  <meta name="SiteID"> 
  <meta name="ReqLC" content="1033"> 
  <meta name="LocLC" content="en-US"> 
  <meta name="mswebdialog-newwindowurl" content="*"> 
  <link rel="SHORTCUT ICON" href="https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/images/favicon_a.ico"> 
  <link href="https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/css/login.ltr.css" rel="stylesheet" type="text/css"> 
  <!--[if lte IE 10]>
  <link href="https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/css/login.ie.css" rel="stylesheet" type="text/css" />
<![endif]--> 
  <!--[if lte IE 7]>
  <style type='text/css'>
    .ie_legacy { display: none; }
    body { background-color: #0072C6; }
  </style>
<![endif]--> 
  <script type="text/javascript">    
    if ((navigator.userAgent.match(/iPad/) || navigator.userAgent.match(/iPhone/))
        && (window.innerWidth)) {
        try {                        
            viewport = document.querySelector("meta[name=viewport]");
            viewport.setAttribute('content', 'width=' + window.innerWidth + ', initial-scale=1.0, maximum-scale=1.0');
            window.onresize = function(event) {
                viewport.setAttribute('content', 'width=' + window.innerWidth + ', initial-scale=1.0, maximum-scale=1.0');
            }
        } catch (err) {     
        }
    }

    var isTouch =  !!("ontouchstart" in window) || window.navigator.msMaxTouchPoints > 0;
    if (!isTouch && true) {    
        var cssId = 'hovereffect';
        if (!document.getElementById(cssId)) {
            var head = document.getElementsByTagName('head')[0];
            var link = document.createElement('link');
            link.id = cssId;
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = "https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/css/login.hover.css";
            link.media = 'all';
            head.appendChild(link);
        }
    }
 </script> 
  <script type="text/javascript">
    if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
        var msViewportStyle = document.createElement("style");
        msViewportStyle.appendChild(
              document.createTextNode(
                  "@-ms-viewport{width:auto!important}"
              )
          );
        msViewportStyle.appendChild(
              document.createTextNode(
                  "@-ms-viewport{height:auto!important}"
              )
          );
        document.getElementsByTagName("head")[0].appendChild(msViewportStyle);
    }
</script> 
  <script src="https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/js/jquery.1.5.1.min.js" type="text/javascript"></script> 
  <script src="https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/js/jquery.easing.1.3.js" type="text/javascript"></script> 
  <script src="https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/js/aad.login.min.js" type="text/javascript"></script> 
  <style>
    body
    {
        display: none;        
    }

    .no_display {
        display: none;
    }
</style> 
  <title>
Sign in        </title> 
 </head> 
 <body> 
  <script>
    if (self == top) {
        var body = $('body');
        body.css('display', 'block');
    } else {
        top.location = self.location;
    }
</script> 
  <div id="background_branding_container" class="ie_legacy" style="background: #FFFFFF"> 
   <img id="background_background_image" alt="Illustration"> 
   <div id="auto_low_bandwidth_background_notification" class="smalltext">
    It looks like you're on a slow connection. We've disabled some images to speed things up.
   </div> 
   <div id="background_company_name_text" class="background_title_text"> 
   </div> 
  </div> 
  <div id="background_page_overlay" class="overlay ie_legacy"> 
  </div> 
  <div id="login_no_script_panel" class="login_panel"> 
   <noscript> 
    <style>body { display: block; }</style> 
    <div class="login_inner_container no_js"> 
     <div class="inner_container cred"> 
      <div class="login_workload_logo_container"> 
      </div> 
      <div id="login_no_js_error_container" class="login_full_error_container"> 
       <div id="login_no_js_error_text" class="cta_text 1"> 
        <h1>We can't sign you in</h1>
        <p>Your browser is currently set to block JavaScript. You need to allow JavaScript to use this service.</p>
        <p>To learn how to allow JavaScript or to find out whether your browser supports JavaScript, check the online help in your web browser.</p> 
       </div> 
      </div> 
     </div> 
    </div> 
    <div id="footer_links_container" class="login_footer_container"> 
     <div class="footer_inner_container"> 
      <table id="footer_table"> 
       <tbody>
        <tr> 
         <td> 
          <div class="footer_glyph"> 
           <img src="https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/images/ad_glyph_footer_30x30.png" class="footer_glyph" alt="Work or school account symbol"> 
          </div> </td> 
         <td> 
          <div class="footer tinytext"> 
           <span class="corporate_footer"><span class="branding_footer">Your work or school account can be used anywhere you see this symbol.</span> <span class="corp_link" id="footer_copyright_link"> Â© 2015 Microsoft </span> <span class="corp_link"> <a id="footer_link_terms" tabindex="38" href="https://login.windows.net/termsofuse">Terms of use</a> </span> <span class="corp_link"> <a id="footer_link_privacy" tabindex="39" href="https://login.windows.net/privacy">Privacy &amp; Cookies</a> </span> </span> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
    </div> 
    <div id="login_prefetch_container" class="no_display"> 
    </div> 
   </noscript> 
  </div> 
  <div id="login_panel" class="login_panel"> 
   <div class="legal_container"></div> 
   <table class="login_panel_layout" style="height: 100%;"> 
    <tbody>
     <tr class="login_panel_layout_row" style="height: 100%;"> 
      <td id="login_panel_center"> <script type="text/javascript">
      $(document).ready(function () {
        if ($.support.cookies) {
          $('.login_inner_container').removeClass('no_display');
          $('.no_cookie').addClass('no_display');
        } else {
          $('.login_inner_container').addClass('no_display');
          $('.no_cookie').removeClass('no_display');
        }
      });
    </script> 
       <div class="login_inner_container no_cookie no_display"> 
        <div class="inner_container cred"> 
         <div class="login_workload_logo_container"> 
         </div> 
         <div id="login_no_cookie_error_container" class="login_full_error_container"> 
          <div id="login_no_cookie_error_text" class="cta_text 1"> 
           <h1>We can't sign you in</h1>
           <p>Your browser is currently set to block cookies. You need to allow cookies to use this service.</p>
           <p>Cookies are small text files stored on your computer that tell us when you're signed in. To learn how to allow cookies, check the online help in your web browser.</p> 
          </div> 
         </div> 
        </div> 
       </div> <script type="text/javascript">
                            $(document).ready(function () {
                                Constants.DEFAULT_LOGO = '';     
Constants.DEFAULT_LOGO_ALT = 'Sign in';
Constants.DEFAULT_ILLUSTRATION = 'https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/images/default_signin_illustration.png';
Constants.DEFAULT_BACKGROUND_COLOR = '#0072C6';
Constants.BOILERPLATE_HEADER = '';
Constants.DEFAULT_BOILERPLATE_HEADER = '';
Constants.DEFAULT_BOILERPLATE_TEXT = '';



    User.UpdateLogo(Constants.DEFAULT_LOGO, Constants.DEFAULT_LOGO_ALT);
    User.UpdateBackground(Constants.DEFAULT_ILLUSTRATION, Constants.DEFAULT_BACKGROUND_COLOR);
    
    if (Constants.DEFAULT_BOILERPLATE_TEXT.length > 0) {
        TenantBranding.AddBoilerPlateText(Constants.DEFAULT_BOILERPLATE_TEXT, Constants.DEFAULT_BOILERPLATE_HEADER);
    }
    

                                jQuery('img#logo_img').attr('src', '');
                                Context.use_instrumentation = false; 
                                User.moveFooterToBottom('250px');

    $('.login_workload_logo_container').hide();
    
    $('#legal-back-button').click(function() {
            event.preventDefault();
            history.back();            
    });

                            });
                        
                            

String.prototype.format = function() {
    var s = this;
    for (var i = 0; i < arguments.length; i++) {
        s = s.replace(new RegExp("\\{" + i + "\\}", "gm"), arguments[i]);
    }

    return s;
}

String.prototype.qs = function (key, value) {
    var re = new RegExp('([?&])' + key + '=([^&#]*)', 'i');

    if (value) {
        return (this.match(re))
            ? this.replace(re, '$1' + key + '=' + value)
            : (this.indexOf('?') > 0)
                ? this + '&' + key + '=' + value
                : this + '?' + key + '=' + value;
    }
    else {
        var match = re.exec(this);
        return (match == null) ? '' : match[2];
    }
}

function removeQueryStringParameter(uri, key) {
  var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");

  return (uri.match(re))
    ? uri.replace(re, '$1')
    : uri;
}

Tiles.drawTile = function(user, image, isDisabled) {
    var primary_name = user.name;
    var secondary_name = user.login;
    var primary_tooltip = user.name;
    var secondary_tooltip = user.login;
    var alt_text = null;
    var glyph_alt_text = null;

    if (user.isLive) {
        alt_text = Constants.MSA_ACCOUNT_TILE_ALT_TEXT.replace("{0}", user.name);
        glyph_alt_text = Constants.MSA_ACCOUNT_IMG_ALT_TEXT;
    } else {
        alt_text = Constants.AAD_ACCOUNT_TILE_ALT_TEXT.replace("{0}", user.name);
        glyph_alt_text = (user.domainHint) ? user.domainHint : Constants.AAD_ACCOUNT_IMG_ALT_TEXT;
    }

    // Get the tile_id and session_id
    var tile_id = Tiles.getStringTileID(user);
    var session_id = user.sessionID ? user.sessionID : '';

    if ((primary_name === '') && (secondary_name !== '')) {
        primary_name = secondary_name;
        primary_tooltip = secondary_tooltip;
        secondary_name = secondary_tooltip = '';
    }

    if (primary_name.toLowerCase() == secondary_name.toLowerCase()) {
        secondary_name = secondary_tooltip = '';
    }

    // If there's a big chance for trimming to occur, we should show title with full text
    var should_trim_length = (user.ignore_length == undefined) || (user.ignore_length == false);

    if (!should_trim_length || (primary_name.length < Constants.MAX_TILE_TEXT_LENGTH)) {
        primary_tooltip = '';
    }

    if (!should_trim_length ||(secondary_name.length < Constants.MAX_TILE_TEXT_LENGTH * 1.6)) {
        secondary_tooltip = '';
    }

    var link = '';
    var link_container = '';
    var link_attribute = '';
    var onclick = null;
    if ($("meta[name=PageID]").attr("content").indexOf("reauth") >= 0) {
        link = '';
        link_container = '<div />';
        link_attribute = 'alt';
    } else if (Context.email_discovery_mode) {
        link = "javascript:" + user.link + "();";
        link_container = '<a />';
        link_attribute = 'href';
        if (user.isLive) {
            onclick = function() {
                            // The user could be an easi user.
                            Context.email_discovery_easi_user = true;
                            Instrument.email_discovery_splitter_choice = EmailDiscovery.WorkflowStates.MSA;
                            EmailDiscovery.LoginMSOAccount();
                        };
        } else {
            onclick = function() {
                            Instrument.email_discovery_splitter_choice = EmailDiscovery.WorkflowStates.AAD;
                            EmailDiscovery.LoginAADAccount();
                        };
        }
        alt_text = user.name;
        glyph_alt_text = user.name;
    } else if (user.link == 'other') {
        link = 'javascript:Tiles.showOtherOption();';
        link_container = '<a />';
        link_attribute = 'href';
        onclick = Tiles.showOtherOption;
        alt_text = user.name;
        glyph_alt_text = user.name;
    } else if (user.isSigned) {
        link = Constants.BASE_URL + $.param({ sessionId : user.sessionID, ctx : Constants.CONTEXT });
        link_container = '<a />';
        link_attribute = 'href';
    } else if (user.link != '') {
        link = "javascript:Tiles.showUser('" + user.link + "', " + user.isLive + ", '" + user.domainHint + "');";
        link_container = '<a />';
        link_attribute = 'href';
        onclick = function() { Tiles.showUser(user.link, user.isLive, user.domainHint); };
    } else {
        link = '';
        link_container = '<div />';
        link_attribute = 'alt';
    }

    var isOther = (user.link == 'other') || (Context.email_discovery_mode) || (link === '') || isDisabled;

    $('#login_user_chooser').append(
            $(link_container)
                .attr('id', tile_id+'_link')
                .attr('data-session-id', session_id)
                .attr(link_attribute, link)
                .attr("tabindex", "1")
                .addClass('tile_link')
                .addClass('tooltip')
                .attr("aria-label", alt_text)
            .append(
                $('<table />')
                .attr('id', tile_id)
                .attr('data-session-id', session_id)
                .addClass('user_tile')
                .append($('<tr />')
                    .addClass(tile_id)
                    .addClass(session_id)
                    .css('cursor', 'pointer')
                    .append('<td><img class="ad_glyph {0}" src="{1}" alt="{2}" /></td>'.format(tile_id, image, glyph_alt_text))
                    .append(('<td class="tile_name">' +
                        '<div class="bigtext tile_primary_name {0}" style="cursor:pointer" {6}>{1}</div>' +
                        '<div class="smallertext tile_secondary_name {0}" style="cursor:pointer" {7}>{2}</div>' +
                        (isOther ? '' : '<div class="smallertext tile_third_name {0}" id="title3_{5}" style="cursor:pointer">{3}</div>') +
                        '</td>'+
                        (isOther ? '' : '<td class="dots">' +
                                            '<div id="{0}_menulink"' +
                                                 'tabindex="1"' +
                                                 'data-ref="{4}"' +
                                                 'data-session-id="{5}"' +
                                                 'title="Click for more actions"' +
                                                 'aria-label="Click for more actions">&bull;&bull;&bull;</div>' +
                                        '</td>'))
                        .format(
                            tile_id,
                            primary_name,
                            secondary_name,
                            (user.isSigned ? 'Signed in' : ''),
                            (user.isSigned ? 'signedin' : 'signedout'),
                            session_id,
                            (primary_tooltip ? 'title="' + primary_tooltip + '"' : ''),
                            (secondary_tooltip ? 'title="' + secondary_tooltip + '"' : ''))
                    )
                )
            )
        );

    $('#'+tile_id+'_menulink')
        .keydown(function (event) {
            var ref = $(this).attr('data-ref'),
                dropdownPanel = $('#' + ref + '-dropdown');

            switch (event.which)
            {
                case 32:
                case 13: { $(this).click(); event.preventDefault(); break; }
                case 27: { dropdownPanel.hide(); break; }
            }
        })
        .click(function (event) {
            event.preventDefault();
            event.stopPropagation();
            var ref = $(this).attr('data-ref'),
                session_id = $(this).attr('data-session-id'),
                dropdownPanel = $('#' + ref + '-dropdown'),
                dropdownPanels = $('.dropdownPanel');

            if (dropdownPanel.is(':visible')) {
                dropdownPanels.hide();
            }
            else {
                var p = $(this).position();

                dropdownPanels.hide();
                dropdownPanel
                    .removeClass("hidden")
                    .removeAttr("aria-hidden")
                    .css({ "left": (p.left - dropdownPanel.width() +20) + "px", "top": (p.top +15) + "px" })
                    .show();
                dropdownPanel
                    .find('li')
                    .removeAttr('aria-hidden')
                    .attr('data-session-id', session_id)
                    .show();

                $('html').one('click', function () {
                    dropdownPanels.hide();
                });
            }
        });

    return tile_id + '_link';
};

/* this code has been ported into aad_core_functions.js */
/* when making changes, duplicate your change in that file */
User.PerformHomeRealmDiscovery = function()
{
    if (Context.username_state.home_realm_state == Constants.State.PENDING) {
        return;
    };

    var username = $.trim($("input#cred_userid_inputtext").val());
    $("div.progress").css("visibility","visible");
    User.startAnimation();
    Context.animationTid = setInterval(User.startAnimation,3500);
    Context.username_state.enable_progress_bar = true;

    $.ajax({
        url: Constants.REALM_RESOLVER_URL + encodeURI(username),
        dataType: "json",
        data: { "api-version": "2.1", "stsRequest": Constants.CONTEXT , "checkForMicrosoftAccount": true },
        beforeSend: function () { Instrument.home_realm_start = Util.now(); },
        success:User.ReceiveTenantInfo,
        error:User.ReceivedHomeRealmError
    });
    Context.username_state.home_realm_state = Constants.State.PENDING;
    Context.username_state.last_checked_email = username;
    User.resize_bg();
};
/* end of ported code */

/* this code has been ported into aad_user_tiles.js */
/* when making changes, duplicate your change in that file */
Tiles.getUser = function (userId, isLive, domainHint) {
    userId = userId.toLowerCase();
    var user = null;

    $.each(Tiles.users, function(index, data) {
        if ((data.login.toLowerCase() == userId && ((data.isLive === isLive) || (data.domainHint === domainHint)))
            || (data.sessionID == userId)) {
                user = data;
            }
        });

    return user;
};

/*
 * Removes a remembered user.
 *  1. Method gets the session id to forget and submits it to server through an AJAX call.
 *  2. Server removes the session from cookies and writes them back to client.
 */
Tiles.forgetRememberedUser = function (event) {
    var sessionId = $(this).parent().attr("data-session-id");

    if(Support.isDefined(sessionId)){
        $.ajax({
            url: '/forgetuser',
            dataType: 'json',
            data: { 'sessionId': encodeURI(sessionId) },
            success: function (data) {
                if (Constants.IS_USE_OTHER_ACCOUNT_VISIBLE)
                {
                    data.push(Tiles.otherJSON);
                }
                users = Tiles.users = data;

                $("#login_user_chooser").html("");

                Tiles.drawUsers();
            },
            error: function (event, textStatus, errorThrown) {
                Support.showClientError(errorThrown);
            },
            timeout: 2000
        });
    } else {
        Util.debug_console('sessionId is not defined');
    }

    event.preventDefault();
};

/*
 * Updates the list of users and repaints tiles.
 */
Tiles.UpdateUsers = function(updatedUsers) {
    if (Constants.IS_USE_OTHER_ACCOUNT_VISIBLE)
    {
        updatedUsers.push(Tiles.otherJSON);
    }
    Tiles.users = users = updatedUsers;

    $("#login_user_chooser").html("");
    Tiles.drawUsers();
}

/*
 * Sign out user (if needed) and remove it from the cookie
 */
Tiles.signoutAndForgetUser = function(event) {
    var sessionId = $(this).parent().attr("data-session-id"),
        shouldForgetUser = event.data.shouldForgetUser,
        text = $("#title3_" + sessionId);

    if(Support.isDefined(sessionId)){
        text.text('Signing out...');
        $(this).append('<iframe name="logoutFrame" src="/uxlogout?sessionId={0}&shouldForgetUser={1}" style="display: none"></iframe>'.format(sessionId, shouldForgetUser));
    } else {
        Util.debug_console('seesionId is not defined');
    }

    event.preventDefault();
};

Tiles.OldShowOtherOption = Tiles.showOtherOption;

Tiles.showOtherOption = function()
{
    Tiles.OldShowOtherOption();

    if ((!Tiles.isUseOtherAccountVisible())
    && (!User.isChxOrAdalOverride())) {
        $("#cred_cancel_button").hide();
    }
};

Tiles.OldShowManagedTileUser = Tiles.showManagedTileUser;

Tiles.showManagedTileUser = function(data) {
    Tiles.OldShowManagedTileUser(data);

    if ((!Tiles.isUseOtherAccountVisible())
    && (!User.isChxOrAdalOverride())) {
        $('#cred_cancel_button').hide();
    }
};

Tiles.isUseOtherAccountVisible = function () {
    return ((Tiles.users != null)
        && (Tiles.users.length !== 0)
        && ((Tiles.users.length !== 1) || (Tiles.users[0].link !== "other")))
        && (Constants.IS_USE_OTHER_ACCOUNT_VISIBLE);
};

User.isChxOrAdalOverride = function() {
    return (Constants.IS_CXH_REQUEST)
      || (Constants.IS_ADAL_REQUEST && Constants.ADAL_UX_OVERRIDE);
};
/* end of ported code */

Post.OldGetCredParameters = Post.GetCredParameters;

Post.GetCredParameters = function(addInstrumentation)
{
    var params = Post.OldGetCredParameters(addInstrumentation);

    // Report CXH version
    params.push({ name: "i20", value: "" });

    if (Context.redirect_to_manage) {
        $.each(params, function(index, item) {
            if (item.name == "LoginOptions")
            {
                item.value = "1" + item.value;
            };
        });
    };

    return params;
};

/*
 * Stores the branding information for a given domain into map.
 */
TenantBranding.StoreBrandingInfo = function(domain, obj) {
    Context.TenantBranding.store.Add(domain, obj);
};

/*
 * Retreives the branding information for a given domain from map.
 */
TenantBranding.GetBrandingInfo = function(domain) {
    Instrument.tenant_branding_start_time = Util.now();

    Context.tenant_branding_ts = "";
    Context.TenantBranding.key = domain;

    if (Context.TenantBranding.default_page) {
        Context.TenantBranding.default_key = domain;
    }

    Context.TenantBranding.applied = true;
    Context.TenantBranding.workload_branding_enabled = false;

    var obj = Context.TenantBranding.store.Get(domain);
    if (obj == undefined) {
        // Error occured. No branding information was stored in map.
        return;
    }

    // We have a cached version object, no need to create object.
    LoginTenantBranding = obj;
    TenantBranding.ApplyTenantBranding();
};

/* this code has been ported into aad_core_functions.js */
/* when making changes, duplicate your change in that file */
User.ReceiveManagedDomain = function(data) {
    if (data.DomainName != undefined) {
        Context.whr = data.DomainName;
    } else {
        Context.whr = data.Login.split('@')[1];
    }

    if(data.TenantBrandingInfo != null) {
        TenantBranding.StoreBrandingInfo(data.DomainName, data.TenantBrandingInfo);
    }

    TenantBranding.PerformDynamicBranding(data.DomainName);
    Context.TenantBranding.user = data.Login;

    Context.username_state.home_realm_state = Constants.State.MANAGED;
    tenant_info.company_name = data.FederationBrandName;
    tenant_info.domain = data.DomainName;

    tenant_info.BackgroundColor = $('#background_branding_container').css('background');
    tenant_info.BackgroundPath = $('#background_background_image').attr('src');
    tenant_info.LogoPath = $('#login_workload_logo_image').attr('src');
    tenant_info.BoilerPlate1 = '';
    tenant_info.BoilerPlate2 = '';
    tenant_info.CTA1 = $('#login_cta_text').text();
    tenant_info.CTA2 = "";
    tenant_info.HadBoilerPlate = false;

    Context.username_state.disable_password = false;
    Context.username_state.enable_progress_bar = false;
    Context.username_state.enable_redirect = false;
    User.UsernameOnChangeHandler();

    return true;
};

User.ReceiveFederatedDomain = function(data) {
    Context.username_state.home_realm_state = Constants.State.FEDERATED;
    tenant_info.company_name = '';
    tenant_info.domain = data.DomainName;
    Context.authn_forward_state = data.AuthNForwardType;

    if (data.DomainName.areEqualIgnoreCase(Constants.MSA_DOMAIN)
    && (!Constants.IS_MSA_SUPPORTED)) {
        $('.pip').stop(true, true);
        $('.pip').hide();
        clearInterval(Context.animationTid);
        Context.username_state.enable_redirect = false;

        Context.back_action_stack.RemoveLastCancelAction();

        Support.showClientError(30065);

        return false;
    }

    // We are already on customized page
    if (data.DomainName == Context.whr) {
        Context.username_state.home_realm_state = Constants.State.MANAGED;
        Util.debug_console('whr set already');
        User.UsernameOnChangeHandler();
        $('#cred_userid_inputtext').blur();
        $('#cred_password_inputtext').focus();
        return false;
    }

    Context.federated_domain = data.DomainName;
    Context.redirect_auth_url = data.AuthURL;
    Context.redirect_target = User.addFederatedRedirectQSParameters(data.AuthURL);
    Context.back_action_stack.AddAction(Constants.CancelAction.FROM_SHOW_USER_TO_TILES);

    Util.updateRedirectionMessage(data.AuthURL);

    if (data.federation_protocol == Constants.FederationProtocol.SAML20 &&
        data.federation_saml_request != null) {
        MSLogin.User.PostToSamlIdp(data);
        return false;
    }

    if (data.FederationGlobalVersion == 1) {
        User.Redirect(Context.redirect_target);
    }

    User.StartRedirection(false);
    return false;
};
/* end of ported code */

User.PostToSamlIdp = function(data) {
    Context.federated_domain = data.DomainName;
    Context.redirect_auth_url = data.AuthURL;
    var constantsWctx = Constants.FEDERATION_QUERY_PARAMETERS.qs('wctx');

    $('#samlform').attr("action", data.AuthURL);

    // We need to decode these here because they get re-encoded during the POST
    $("#samlrelaystate").val(decodeURIComponent(constantsWctx));
    $("#samlrequest").val(decodeURIComponent(data.federation_saml_request));

    $('#samlform').submit();
};

TenantBranding.PerformDynamicBranding = function(TenantBrandingURL)
{
    if(TenantBranding.IsDynamicBrandingEnabled() && !Constants.FORCED_SIGN_IN)
    {
        if (Context.TenantBranding.store.Get(TenantBrandingURL) == undefined)
        {
            TenantBrandingURL = null;
        }

        if(TenantBranding.IsShowingDynamicBranding() && Context.TenantBranding.key != null && Context.TenantBranding.key == TenantBrandingURL && !TenantBranding.IsShowingDynamicWorkloadBranding())
            return;
        Instrument.tenant_branding_getuserrealm_time = Instrument.home_realm_load_time;
        if(TenantBrandingURL != undefined && TenantBrandingURL != null && (Context.TenantBranding.key == null || TenantBranding.IsShowingDynamicWorkloadBranding()))
        {
            Context.TenantBranding.default_page = false;
            Context.TenantBranding.enabled = true;
            Instrument.has_dynamic_tenant_branding = true;
            Instrument.tenant_branding_number_of_switches++;
            Util.debug_console("workload branding -> tenant branding");
            TenantBranding.RemoveWorkloadBranding();
            TenantBranding.GetBrandingInfo(TenantBrandingURL)
        }
        else
            if(TenantBrandingURL != undefined && TenantBrandingURL != null && Context.TenantBranding.key != null && TenantBrandingURL != Context.TenantBranding.key)
            {
                Instrument.has_dynamic_tenant_branding = true;
                Instrument.tenant_branding_number_of_switches++;
                Context.TenantBranding.default_page = false;
                Context.TenantBranding.enabled = true;
                TenantBranding.ReplaceTenantBranding(TenantBrandingURL)
            }
            else
                if(Context.TenantBranding.key != null && (TenantBrandingURL == undefined || TenantBrandingURL == null || TenantBrandingURL == ""))
                {
                    Instrument.has_dynamic_tenant_branding = true;
                    Instrument.tenant_branding_number_of_switches++;
                    Context.TenantBranding.default_page = false;
                    Context.TenantBranding.enabled = true;
                    TenantBranding.ApplyWorkloadBranding()
                }
    }
};

Post.SubmitCreds = function() {
    if (!Post.IsSubmitReady()) {
        return;
    }

    $('#cred_password_inputtext').focus();
    var params = [];
    params = Post.GetCredParameters(Constants.SUBMIT_METRICS_ON_POST);

    
    var dedupHelper = [];
    $.each(params, function(i, param) {
        if($.inArray(param.name, dedupHelper) !== -1) {
            return;
        }

        if (param.value != undefined) {
            $('<input />').attr('type', 'hidden')
                .attr('name', param.name)
                .attr('value', param.value)
                .appendTo('#credentials');

            dedupHelper.push(param.name);
        }
    });

    $('form#credentials').submit();
};

/* this code has been ported into aad_core_functions.js */
/* when making changes, duplicate your change in that file */
User.OldUpdateLogo = User.UpdateLogo;

User.UpdateLogo = function(new_logo_image, fallback_text)
{
    if(new_logo_image == "")
    {
        $(".login_workload_logo_container").html("");
    }
    $('.workload_img').remove();

    User.OldUpdateLogo(new_logo_image, fallback_text);
}

User.OldStartRedirection = User.StartRedirection;

User.StartRedirection = function(using_user_input)
{
    User.OldStartRedirection(using_user_input);

    if (!Constants.IS_CXH_REQUEST && !Constants.IS_ADAL_REQUEST) {
        $("#cred_sign_in_button").hide();
    }

    return Context.redirectTid;
}
/* end of ported code */

User.addFederatedRedirectQSParameters = function(sURL)
{
    var oldUrl = sURL;
    if (Util.isMSA(sURL))
    {
        sURL = Constants.MSA_AUTH_URL;

        // If pcexp is present in the current page query parameters it should also be passed
        // forward to federated target. It is added/overridden for ADAL/Mobile.
        var sPCExp = decodeURIComponent(Util.ExtractQSParam('pcexp'));

        var display = decodeURIComponent(Util.ExtractQSParam('display'));
        if(display.areEqualIgnoreCase('popup')){
            sPCExp = false;
        }

        if(Background.winW < Constants.MOBILE_WIDTH_THRESHOLD) {
            sPCExp = false;
        }

        if (sURL.indexOf('pcexp') < 0) {
            sURL += '&pcexp=' + encodeURIComponent(sPCExp);
        } else {
            sURL = sURL.replace(/pcexp=[^&]*/i, 'pcexp=' + encodeURIComponent(sPCExp));
        }
    }

    User.resize_bg();
    var sCBCxt = decodeURIComponent(Util.ExtractQSParamFromUrl(sURL,'cbcxt'));
    sURL = sURL.replace(/cbcxt=[^&]*/i, 'cbcxt=' + encodeURIComponent(sCBCxt));

    var sVV = decodeURIComponent(Util.ExtractQSParam('vv'));
    sURL = sURL.replace(/vv=[^&]*/i, 'vv=' + encodeURIComponent(sVV));

    var sUsername = decodeURIComponent(Util.ExtractQSParam('username'));
    var iUsername = $('#cred_userid_inputtext').val();
    if (iUsername != '') {
        sURL = sURL.replace(/username=[^&]*/i, 'username=' + encodeURIComponent(iUsername));
    } else if (sUsername != '') {
        sURL = sURL.replace(/username=[^&]*/i, 'username=' + encodeURIComponent(sUsername));
    }

    var sMKT = decodeURIComponent(Util.ExtractQSParam('mkt'));
    sURL = sURL.replace(/mkt=[^&]*/i, 'mkt=' + encodeURIComponent(sMKT));

    var sLC = decodeURIComponent(Util.ExtractQSParam('lc'));
    sURL = sURL.replace(/lc=[^&]*/i, 'lc=' + encodeURIComponent(sLC));

    // If popupui is present in the current page query parameters it should also be passed
    // forward to federated target. It is added/overridden for ADAL/Mobile.
    var sPop = decodeURIComponent(Util.ExtractQSParam('popupui'));
    if(Constants.IS_ADAL_REQUEST || Background.winW < Constants.MOBILE_WIDTH_THRESHOLD) {
        sPop = 1;
    }

    if (sURL.indexOf('popupui') < 0) {
        sURL += '&popupui=' + encodeURIComponent(sPop);
    } else {
        sURL = sURL.replace(/popupui=[^&]*/i, 'popupui=' + encodeURIComponent(sPop));
    }

    // TODO(rogerlee): Workaround for bug 87198
    sURL = sURL.replace(/guests%3D1/i, '');

    // Add LoginOptions if any
    var lo = oldUrl.qs('LoginOptions');
    if (lo == '') {
        lo = $('#cred_keep_me_signed_in_checkbox').attr("checked") ? '1' : '';
    }

    if (lo !== '') {
        var w = sURL.qs('wreply');
        if (w != '') {
            w += ((w.indexOf('%3f') >= 0) ? '%26' : '%3f') + 'LoginOptions%3d' + lo;
            sURL = sURL.qs('wreply', w);
        }
        else {
            w = sURL.qs('wctx');
            if (w != '') {
                w += '%26LoginOptions%3d' + lo;
                sURL = sURL.qs('wctx', w);
            }
        }

        sURL = sURL.qs('LoginOptions', lo);
    }

    if (Constants.PROMPT == 'login') {
        sURL = sURL.qs('wfresh', '0');
    }

    return sURL;
};

MSLogin.TenantBranding.ApplyWorkloadBranding = function() {
    Context.TenantBranding.workload_branding_enabled = true;

    if (!Context.TenantBranding.workload_branding_saved || Context.TenantBranding.default_page) {
        // Workload branding was not saved, or we came from a tenant branded page.
        // Let's set the tenant branding to be removed by the onLoadLogo event.
        TenantBranding.RemoveTenantBrandingDelayed();

        User.UpdateLogo(Constants.DEFAULT_LOGO, Constants.DEFAULT_LOGO_ALT);
        User.UpdateBackground(Constants.DEFAULT_ILLUSTRATION, Constants.DEFAULT_BACKGROUND_COLOR);
        $('#background_background_image').show();

        Background.background_resized = false;
        Context.on_load_image_background_loaded = false;
        Logo.logo_image_loaded = false;

    } else {
        // Remove Tenant Branding.
        TenantBranding.RemoveTenantBranding();

        // Load saved workload branding.
        if (Support.isDefined(Context.TenantBranding.workload_branding_illustration)) {
            $('#background_branding_container').prepend(Context.TenantBranding.workload_branding_illustration.clone());
        }

        if (Support.isDefined(Context.TenantBranding.workload_branding_logo)) {
            $('.login_workload_logo_container').append(Context.TenantBranding.workload_branding_logo.clone());
        }

        if (Support.isDefined(Context.TenantBranding.workload_branding_logo_text)) {
            $('.login_workload_logo_container').append(Context.TenantBranding.workload_branding_logo_text.clone());
        }

        User.RegisterOnLoadImage();

        var new_height = Context.TenantBranding.footer_height;
        if (new_height > 0) {
            $('#footer_links_container').css('height', new_height + "px");
            $('#footer_links_container').css('margin-top', '-' + new_height + 'px');
        }

        $("#background_page_overlay").css("background-color", Constants.DEFAULT_BACKGROUND_COLOR);
        $('#background_background_image').css('background-color', Constants.DEFAULT_BACKGROUND_COLOR);
        $('#background_branding_container').css('background-color', Constants.DEFAULT_BACKGROUND_COLOR);
        $('html').css('background-color', Constants.DEFAULT_BACKGROUND_COLOR);

        $('#background_background_image').removeClass('slide');
        $('.workload_img').removeClass('slide');
        $('.workload_img_text').removeClass('slide');
        $('#background_background_image').hide();
        $('#background_background_image').show();
        $('#background_page_overlay').hide();
        $('.workload_img').show();
        $('.workload_img_text').show();
        $('#background_background_image').addClass('slide');
        $('.workload_img').addClass('slide');
        $('.workload_img_text').addClass('slide');

        Background.background_resized = true;
        Context.on_load_image_background_loaded = true;
        Logo.logo_image_loaded = true;
    }

    if (Context.TenantBranding.cred_height) {
        $('.cred').css('min-height', Context.TenantBranding.cred_height);
    }

    // Return the login_cta_text back to the original message.
    if (Support.isDefined(Context.TenantBranding.workload_branding_login_cta_text)) {
        $('#login_cta_text').text(Context.TenantBranding.workload_branding_login_cta_text);
    }
};

MSLogin.Support.OldRenderBrowserSpecific = MSLogin.Support.renderBrowserSpecific;

MSLogin.Support.renderBrowserSpecific = function () {
    MSLogin.Support.OldRenderBrowserSpecific();

    if ($.browser.msie && document.documentMode < 11) {
        $('.cred').css('padding-bottom', '0px');

        var resize = function() {
            var difference = $(window).height()-$('#true_inner').height()-$('.push').height()-60;
            $("#login_panel_center").css('height', (difference > 0) ? ($(window).height() -15) : '');
        };

        document.body.onresize = resize;
        resize();
    }
};

MSLogin.Support.LegalActionLink = function(url){

    $.ajax({
        url: url,
        data: {IsAjax: true},
        success: function(data) {
           $('.login_panel_layout').hide();
           $('.legal_container').html(data).show();

           $('#legal-back-button').click(function(event){
              $('.legal_container').hide();
              $('.login_panel_layout').show();
           })
        },
        error: function() {
            
        }
    });
};

MSLogin.TenantBranding.RestoreDefaultPageBranding = function() {
    if (typeof(Constants.DEFAULT_BRANDING) != 'undefined') {
         if (!Context.TenantBranding.applied
        || (Context.TenantBranding.key != Constants.DEFAULT_BRANDING)) {
            MSLogin.TenantBranding.GetBrandingInfo(Constants.DEFAULT_BRANDING);
        }
    }
    else {
        MSLogin.TenantBranding.RemoveTenantBrandingAndApplyWorkload();
    }
};

MSLogin.TenantBranding.OldShowBrandedBoilerPlate = MSLogin.TenantBranding.ShowBrandedBoilerPlate;

MSLogin.TenantBranding.ShowBrandedBoilerPlate = function() {
        $('#boiler_plate').remove();
        TenantBranding.OldShowBrandedBoilerPlate();
};

$(document).ready(function() {
    $('#footer_link_terms').click(function(event) {
        event.preventDefault();
        MSLogin.Support.LegalActionLink('/termsofuse');
    });

    $('#footer_link_privacy').click(function(event) {
        event.preventDefault();
        MSLogin.Support.LegalActionLink('/privacy');
    });

    $('#footer_link_privacy_windows').click(function(event) {
        var flyoutButton = $('#footer_link_privacy_windows')[0]; // anchor
        var flyout = $('#flyoutPrivacyStatement')[0]; // flyout div
        var pageTop = $('.body-container')[0].getBoundingClientRect().top + (window.pageYOffset || document.documentElement.scrollTop || 0)
        flyout.style.marginTop = pageTop + "px"; // adjust margin top so flyout doesn't cover header
        flyout.winControl.show(flyoutButton, "top", "left");
    });

    if(!Constants.IS_ADAL_REQUEST) {
        $('#create_msa_account_link, #account_not_found_title_text > p > a').click(function(event){             
            event.preventDefault();
            var msaLink = event.target.getAttribute("href");            
            window.open(msaLink, '_blank');
            window.focus();
        });
    } else {
        $('#account_not_found_title_text p').toggleClass('no_display');
    }
});

MSLogin.Support.ViewErrorDetails = function () {
    $('.view-error-details-title').toggleClass('no_display');
    $('.view-error-details-content').toggleClass('no_display');
};

Util.ExtractQSParamFromUrl = function(url, param) {
    var queryString = url.substring(url.indexOf('?') + 1);
    if (queryString) {
        queryString = queryString.substring(1);
    }

    return Util.ExtractToken(queryString, param.toLowerCase(), "&", "=", "");
};


                        </script> 
       <div class="login_inner_container"> 
        <div id="true_inner" class="inner_container cred"> 
         <div class="login_workload_logo_container"></div> 
         <div class="spacer"></div> 
         <div class="legal normaltext"> 
          <div class="legal_header"> 
           <div class="legal_title">
             Terms of Use for Microsoft Azure Active Directory Sign-in/Sign-up Service 
           </div> Last updated: July 2014 
          </div> 
          <div class="legal_section"> 
           <div class="legal_title">
            Acceptance
           </div> Your use of the Microsoft Azure Active Directory Sign-in/Sign-up Service (the âServiceâ) is governed by these Terms of Use ("TOU"). They do not apply to your use of other Microsoft business websites, services and products after you complete the sign-in or sign-up process, nor does it apply to any other Microsoft business websites, services or products that do not display or link to this statement or that have their own terms of use. Microsoft reserves the right to update these TOU at any time without notice to you. The most current version of the applicable TOU can be found at the âTerms of Useâ hypertext link located at the bottom of this website.
           <b>You may only access or use this Service if you agree to these TOU. If you do not agree, do not access or use the Service.</b> 
          </div> 
          <div class="legal_section"> 
           <div class="legal_title">
            Services offered through the Service
           </div> In order to access certain Microsoft business websites, services and products, you will be asked to create or provide account credentials, such as username and password, which may be provided to you by your organization. You should direct inquiries regarding use of or access to such Microsoft business websites, services or products to the organization that provides your user account. For example, if you are unable to access the Microsoft business websites, services or products after entering your credentials, please contact your organizationâs IT administrator.
           <b>These TOU do not govern the trial, sale, purchase or use of any other Microsoft business websites, services or products. Each Microsoft business websites, services or products you access is governed by agreement(s) agreed to by you or the organization that provides you access to such Microsoft business websites, services or products.</b> 
          </div> 
          <div class="legal_section"> 
           <div class="legal_title">
            Privacy
           </div> Please read the Privacy Statement for information about Microsoft's collection and use of your information when using the Service. The most current version of the applicable Privacy Statement can be found at the âPrivacy &amp; Cookiesâ hypertext link located at the bottom of this website. 
          </div> 
          <div class="legal_section"> 
           <div class="legal_title">
            No warranties and limitation of liability
           </div> 
           <div class="legal_sub_section"> 
            <b>MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, GUARANTEES OR CONDITIONS WITH RESPECT TO YOUR USE OF THE SERVICE. YOU UNDERSTAND THAT USE OF THE SERVICE IS AT YOUR OWN RISK AND THAT WE PROVIDE ACCESS TO THE SERVICE ON AN âAS ISâ BASIS âWITH ALL FAULTSâ AND âAS AVAILABLE.â</b> 
           </div> 
           <div class="legal_sub_section">
            TO THE EXTENT PERMITTED BY LAW, IN NO EVENT WILL MICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY OTHER DAMAGES HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE), ARISING OUT OF OR IN CONNECTION WITH THE USE OF THE SERVICE.
           </div> 
           <div class="legal_sub_section">
            FOR AUSTRALIA ONLY: YOU HAVE STATUTORY GUARANTEES UNDER THE AUSTRALIAN CONSUMER LAW AND NOTHING IN THESE TOU IS INTENDED TO AFFECT THOSE RIGHTS.
           </div> 
          </div> 
          <div class="legal_section"> 
           <div class="legal_title">
            Intellectual property rights.
           </div> Microsoft or its suppliers retain all right, title and interest in and to the Service, including all copyrights, patents, trade secrets, trademarks and other intellectual property rights. Microsoft reserves all rights not expressly granted. These TOU do not grant or imply any rights to any Microsoft or supplier trademarks, trade names or logos. Trademark information is available at http://go.microsoft.com/fwlink/?LinkID=108161&amp;CLCID=0x409. 
          </div> 
          <div class="legal_section"> 
           <div class="legal_title">
            Notices and procedure for making claims of copyright infringement.
           </div> Pursuant to Title 17, United States Code, Section 512(c)(2), notifications of claimed copyright infringement should be sent to Service Provider's Designated Agent. ALL INQUIRIES NOT RELEVANT TO THE FOLLOWING PROCEDURE WILL NOT RECEIVE A RESPONSE. See Notice and Procedure for Making Claims of Copyright Infringement available at http://go.microsoft.com/fwlink/?LinkID=203343&amp;clcid=0x409. 
          </div> 
          <span id="legal-back-button" class="button normaltext" tabindex="11" role="button"> Back </span> 
         </div> 
        </div> 
        <div class="push"> 
        </div> 
       </div> </td> 
     </tr> 
    </tbody>
   </table> 
  </div> 
  <script type="text/javascript">
    Constants.PREFILL_MEMBER_NAME = '';
    Constants.MEMBER_NAME = "";
    Constants.DEFAULT_FOOTER_LINKS = {
        'legal': {
            'label': 'Legal',
            'url': ''
        },                
        'helpcentral': {
            'label': 'Help',
            'url': ''
        },
        'feedback': {
            'label': 'Feedback',
            'url': ''
        },
        'privacyandcookies': {
            'label': 'Privacy \u0026 Cookies',
            'url': 'https://login.windows.net/privacy'
        },
        'helpfor2fa': {
            'label': 'Help',
            'url': 'http://g.microsoftonline.com/0AX00en-US/670'
        }
    };

    Constants.DEFAULT_ENABLED_FOOTER_LINKS = [];
    Constants.FOOTER_LINKS = '';
    Constants.REDIRECT_MESSAGES = {
        'AAD': "We\u0027re taking you to your organization\u0027s sign-in page.",
          'MSA': "Weâre taking you to the Microsoft account sign-in page."
      };

      User.ProcessFooterLinks(Constants.FOOTER_LINKS);

    Constants.FEDERATION_QUERY_PARAMETERS = 'wa=wsignin1.0\u0026wtrealm=https%3a%2f%2flogin.windows.net\u0026wctx=estsredirect%3d1%26estsrequest%3d3wEAAAABAAAAAQAAAAAAAAAAAAAAAAEAAQEBA2NpZAEkODcxM2YyZjQtOGZmZC00MDZjLWJhNzgtMjE1NjM5MjA4YjE57Q2';
    Constants.CONTEXT = '';
    Constants.BASE_URL = '/common/reprocess?';
    Constants.LATENCY_THRESHOLD = 2000;
          
    Constants.CDN_IMAGE_PATH = 'https://secure.aadcdn.microsoftonline-p.com/ests/1.0.0.26/content/images/';
    Constants.PREFETCH_URL = "";
    Constants.IS_USE_OTHER_ACCOUNT_VISIBLE = true;
    Constants.OTHER_ACCOUNT_TEXT = "Use another account";
    Constants.MAX_USER_TILES = 5;
    try {
        Constants.FEATURE_SLOT_MASK = 39847;
        Constants.FEATURE_SLOT_THRESHOLD = 2147482559;
    } catch (err) {
        Util.debug_console('params slots ' + err);
    }
    Constants.MSA_LABEL = "(Microsoft account)";
    Constants.PARTNER_NAME = "Sign in with your work or school account";
    Constants.DIR = 'ltr';
    Constants.METRICS_MODE = 1;  // Client metrics mode.
    Constants.TokenizedStringMsgs.GENERIC_ERROR = "\u003cH1\u003eSorry, but we\u0027re having trouble signing you in\u003c/H1\u003e\u003cp\u003ePlease try again in a few minutes. If this doesn\u0027t work, you might want to contact your admin and report the following error: {0}.\u003c/p\u003e";
    Constants.TokenizedStringMsgs.UPN_DISAMBIGUATE_MESSAGE = "It looks like {0} is used with more than one account. Which account do you want to use?";
    Constants.LCID = "1033";
    Constants.MSA_ACCOUNT_IMG_ALT_TEXT = "Microsoft account symbol";
    Constants.AAD_ACCOUNT_IMG_ALT_TEXT = "Work or school account symbol";
    Constants.MSA_ACCOUNT_TILE_ALT_TEXT = "Microsoft account for {0}";
    Constants.AAD_ACCOUNT_TILE_ALT_TEXT = "Work or school account for {0}";
    Constants.REALM_RESOLVER_URL = "/common/userrealm/";
    Constants.FORCED_SIGN_IN = false;
    Constants.MSA_AUTH_URL = 'https://login.live.com/login.srf?wa=wsignin1.0\u0026wtrealm=urn%3afederation%3aMicrosoftOnline\u0026wctx=estsredirect%3d1%26estsrequest%3d3wEAAAABAAAAAQAAAAAAAAAAAAAAAAEAAQEBA2NpZAEkODcxM2YyZjQtOGZmZC00MDZjLWJhNzgtMjE1NjM5MjA4YjE57Q2\u0026wp=LBI_FED_STS_CLEAR\u0026id=\u0026cbcxt=\u0026lc=\u0026mkt=\u0026popupui=\u0026username=\u0026vv=';
    Constants.IS_CXH_REQUEST = false;
    Constants.IS_ADAL_REQUEST = false;
    Constants.IS_NAME_COEXISTENCE_ACCOUNT = false;
    Constants.ADAL_UX_OVERRIDE = false;    
    Constants.CANCEL_REDIRECT_URL = '';
    Constants.IS_MSA_SUPPORTED = true;
    Constants.MSA_DOMAIN = 'live.com';
    Constants.PROMPT = '';
    Constants.USERNAME_HINT_TEXT = 'someone@example.com ';

    // Setup cta message fields.
    User.setupCallToActionMessages();
            
    Constants.SPLIT_VIEW_ENABLED = true;

</script>   
 </body>
</html>